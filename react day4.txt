
2a.(Question) Create an <App> component that returns a paragraph with the text:
“Hello, welcome to my website” inside.
Then, render this <App>. Hello, welcome to my website.
2a.(Solution)
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
<body>
    <div class="js-container"></div>
    <script type="text/babel">
        function App(){
            return(

                <>
                <p>Hello,welcome to my Website</p>
                </>
            )
        };
    let container = document.querySelector('.js-container')
    ReactDOM.createRoot(container).render(<App />)
</script>

2b.(Question) Continuing from 2a, in the <App> component, add 2 buttons after
the paragraph: “Login” and “Sign up”

- Use a Fragment to group them together
- Use () to write the JSX on multiple lines.
2b.(Solution)
<div class="js-container"></div>
    <script type="text/babel">
        function App(){
            return(

                <>
                <p>Hello,welcome to my Website</p>
                <button>Login</button>
                <br/>
                <button>Sign up</button>
                </>
            )
        };
    let container = document.querySelector('.js-container')
    ReactDOM.createRoot(container).render(<App />)
</script>
2c.(Question) Continuing from 2b, in the <App> component, add 2 text boxes above
the buttons with the placeholders “Email” and “Password”.

- Lay out the textboxes on separate lines using <div>
- Try adding the attribute type="password" to the password textbox. This will cover up the text as you type
2c.(Solution)
    <div class="js-container"></div>
    <script type="text/babel">
        function App() {
            return (

                <>
                    <p>Hello,welcome to my Website</p>
                    <div>
                        <input type="E-mail" placeholder="Write Your E-mail" />
                    </div>
                    <div>
                        <input type="password" placeholder="Write Your Password" />
                    </div>
                    <button>Login</button>
                    <button>Sign up</button>
                </>
            )
        };
        let container = document.querySelector('.js-container')
        ReactDOM.createRoot(container).render(<App />)
    </script>
    2d.(Question) Continuing from 2c, create a new component called LoginFoxrm,
and move the textboxes and buttons (all the login-related code)
into this component. Then, inside <App>, use <LoginForm> to create
the textboxes and buttons.
2d.(Solution)
<body>
    <div class="js-container"></div>
    <script type="text/babel">
        function LoginForm() {
            return (
                <>
                    <div>
                        <input type="E-mail" placeholder="Write Your E-mail" />
                    </div>
                    <div>
                        <input type="password" placeholder="Write Your Password" />
                    </div>
                    <button>Login</button>
                    <button>Sign up</button>
                </>
            )
        };
        function App(){
            return(
                <>
                <p>Hello,welcome to my Website</p>
                <LoginForm />
                </>
            )
        };
        let container = document.querySelector('.js-container')
        ReactDOM.createRoot(container).render(<App />)
        2e.(Question) Let's say we're creating an e-commerce app, and one
of the products is socks. Create an <App> component
and display the details on the right onto the website:
2e.(Solution)
<body>
    <div class="js-container"></div>
    <script type="text/babel">
        function App(){
            return(
                <>
                <p>PRODUCT DETAIL</p>
                <h3>Cotton Socks</h3>
                <img src="./cotton-socks.png" width ="80"/>
                </>
            )
        };
let container = document.querySelector('.js-container')
        ReactDOM.createRoot(container).render(<App />)
    </script>    
</body>
2f.(Question) Display 2 more products on the website: tennis balls and a t-shirt Instead of duplicating the code, create a <ProductDetails> component, and use props to make it reusable. Then, display 3 <ProductDetails> on the website for the socks, tennis balls, and t-shirt.
2f.(Solution)
<body>
    <div class="js-container"></div>
    <script type="text/babel">
        function ProductDetails(){
            return(
                <>
                <p>PRODUCT DETAIL</p>
                <h3>Cotton Socks</h3>
                <img src="./cotton-socks.png" width ="80"/>
                <h3>Tennis Balls</h3>
                <img src="./tennis-balls.png" width ="80"/>
                <h3>Plain T-Shirt</h3>
                <img src="./plain-t-shirt.png" width ="80"/>
                </>
            )
        };
let container = document.querySelector('.js-container')
        ReactDOM.createRoot(container).render(<ProductDetails />)
    </script>
    2g.(Question) Continuing from 2f, some products can have a discount. Add a prop to <ProductDetails> called discountPrice. If discountPrice exists, display it under the original price.

- Give the socks product a discount price of $5.45
2g.(Solution)
<body>
    <div class="js-container"></div>
    <script type="text/babel">
        function ProductDetails({name,cost,discountprice}){
            return(
                <>
                <h4>Product name:{name}</h4>
                <mark>Price:{cost}</mark>
                <p>Discount Price:₹{discountprice}</p>
                </>
            )
        };
        function App(){
            return(
                <>
                <ProductDetails
                 name="Cotton Socks" 
                 cost ="₹50"
                 discountprice="5.45"/>
                <ProductDetails 
                name="Tennis Balls"
                 cost ="₹80"/>
                <ProductDetails 
                name="Plain T-Shirt" 
                cost ="₹250"/>
                </>
            )
        }
let container = document.querySelector('.js-container')
        ReactDOM.createRoot(container).render(<App />)
    </script>
    2h.(Question) If a product has a discountPrice also cross out the original price.

- To cross out text, surround it with the element: <del>...</del>
- Don't cross out the original price if there's no discount. To check if discountPrice does not exist, use !discountPrice
- There are several ways to do this exercise. As long as you get the final result, you're good!
2h.(Solution)
<body>
    <div class="js-container"></div>
    <script type="text/babel">
        function ProductDetails({name,cost,discountprice}){
            return(
                <>
                <h4>Product name:{name}</h4>
                {!discountprice&&(<p>Price:{cost}</p>)}
                {discountprice&&(<del>Price:{cost}</del>)}
                {discountprice&&(<p>Discount Price:₹{discountprice}</p>)}
                {discountprice&&(<p></p>)}
                </>
            )
        };
        function App(){
            return(
                <>
                <ProductDetails
                 name="Cotton Socks" 
                 cost ="₹50"
                 discountprice="5.45"/>
                <ProductDetails 
                name="Tennis Balls"
                 cost ="₹80"/>
                <ProductDetails 
                name="Plain T-Shirt" 
                cost ="₹250"/>
                </>
            )
        };
let container = document.querySelector('.js-container')
        ReactDOM.createRoot(container).render(<App />)
    </script>
    2i.(Question) JavaScript has a feature called the ternary operator:
» const result = valuel ? value2 : value3;

If value1 is true, then the result is value2. Else, the result is values.

- This lets us insert an if-else statement directly in the JSX.
- Update the previous exercise to use a ternary operator in the JSX.
2i(Solution)
<body>

    <div class="js-container"></div>
    <script type="text/babel">
        function ProductDetails({name,cost,discountPrice}){
            return(
                <>
                <h3>Product name:{name}</h3>
                {discountPrice?(
                <>
                <mark><del>Price:{cost}</del></mark>
                <p>Discount Price:₹{discountPrice}</p>
                </>                
                 ):(<p>Price:{cost}</p>)}
                </>
            );
        };
        function App(){
            return(
                <>
                <ProductDetails
                 name="Cotton Socks" 
                 cost ="₹50"
                 discountprice="5.45"/>
                <ProductDetails 
                name="Tennis Balls"
                 cost ="₹80"/>
                <ProductDetails 
                name="Plain T-Shirt" 
                cost ="₹250"/>
                </>
            )
        };
        let container = document.querySelector('.js-container')
        ReactDOM.createRoot(container).render(<App/>)

    </script>
    2j.(Question) We'll add an image at the top of each Product. I’ll provide (replace with cotton-socks.png,
tennis-balls.png, and plain-t-shirt.png). Download the images.

- In <ProductDetails> add an <img> at the top, and add a prop called
imageSrc. Give the <img> the attribute src={imagesrc} (this sets the
src attribute to the value of the imageSsxc prop).
- Then in <App>, give each <ProductDetails> a prop imageSre="__ "
(replace with the file name of the image, like cotton-socks.png)
2j.(Solution)
<body>

    <div class="js-container"></div>
    <script type="text/babel">
        function ProductDetails({name,cost,discountPrice,imgsrc}){
            return(
                <>
                
                <h3>Product name:{name}</h3>
                <img src={imgsrc} width ="80"/>
                {discountPrice?(
                <>
                <mark><del>Price:{cost}</del></mark>
                <p>Discount Price:₹{discountPrice}</p>
                </>                
                 ):(<p>Price:{cost}</p>)}
                </>
            );
        };
        function App(){
            return(
                <>
                <ProductDetails
                 name="Cotton Socks" 
                 cost ="₹50"
                 discountprice="5.45"
                 imgsrc ="./cotton-socks.png"/>
                <ProductDetails 
                name="Tennis Balls"
                 cost ="₹80"
                 imgsrc ="./tennis-balls.png"/>
                <ProductDetails 
                name="Plain T-Shirt" 
                cost ="₹250"
                imgsrc="plain-t-shirt.png"/>
                </>
            )
        };
        let container = document.querySelector('.js-container')
        ReactDOM.createRoot(container).render(<App/>)

    </script>
